- content_for :js_templates do
  = render :partial => 'backer'
  = render :partial => 'project_templates'

= content_for :meta_tags do
  - if @update
    meta name="description" content=@update.title
    meta property="og:title" content=@update.title
    meta property="og:description" content=@update.comment
    - if @project.permalink
      meta property="og:url" content=project_by_slug_url(@project.permalink, :update_id => @update.id, :locale => I18n.locale)
  - else
    meta name="description" content=@project.headline
    meta property="og:title" content=@project.name
    meta property="og:description" content=@project.headline
    - if @project.permalink
      meta property="og:url" content=project_by_slug_url(@project.permalink, :locale => I18n.locale)
  meta property="og:type" content='cause'
  meta property="og:image" content=@project.display_image
  meta property="og:site_name" content=t('site.name')
  meta property="fb:admins" content="#{fb_admins}"

#page_content
  .container
    - if @project.draft?
      br
      #project_warning.bootstrap-alert
        - if @project.rejected?
          .alert.alert-warning
            = t('.rejected')
        - else
          - if can? :update, @project
            .alert.alert-warning
              = t('.waiting_owner')
    #project_description[data-project=@project.to_json]
    .project_image
      = image_tag @project.display_image, :width=>'85px', :height => '67px'
    .section_header
      h1= @project.name
      h4= t('projects.project_header.without_city', :category_name => link_to(@project.category.name, explore_path(:anchor => @project.category.name.parameterize)), :author => link_to(@project.user.display_name, user_path(@project.user))).html_safe
    .tab_container
      nav#project_menu
        = link_to '#about', :id => 'about_link', :class => 'selected' do
          = t('.menu.about')
        = link_to '#updates', :id => 'updates_link' do
          = t('.menu.updates')
          span.count=" (#{@project.updates.count})"
        = link_to '#backers', :id => 'backers_link' do
          = t('.menu.backers')
          span.count=" (#{@project.total_backers})"
        = link_to '#comments', :id => 'comments_link' do
          = t('.menu.comments')
          | &nbsp; (
          fb:comments-count href="#{request.url}"
          | )
        - if can? :update, @project
          = link_to '#edit', :id => 'edit_link' do
            = t('.menu.edit')
    .main
      #project_content
        - if can? :update, @project
          #project_edit.content.hide
            .bootstrap-twitter
              .alert.alert-info
                p style='margin-bottom: 0; padding-bottom: 0;'
                  = "Para saber tudo sobre como estruturar o seu projeto, baixe o #{link_to 'GUIA COMPLETO', 'http://catarse.me/guia_realizadores.pdf', target: '_blank'}".html_safe
            .bootstrap-form
              = semantic_form_for @project do |form|
                = form.inputs do
                  - if current_user.admin
                    = form.input :expires_at, as: :string
                    = form.input :user_id
                  - if can? :update, @project, :name
                    = form.input :name, as: :string, required: false
                  - if can? :update, @project, :headline
                    = form.input :headline, as: :string, required: false
                  - if can? :update, @project, :category
                    = form.input :category, as: :select, required: false
                  - if can? :update, @project, :video_url
                    = form.input :video_url, as: :string, hint: t('formtastic.hints.project.video_url_edit'),required: false
                  - if can? :update, @project, :uploaded_image
                    = form.input :uploaded_image, as: :file, required: false
                  - if can? :update, @project, :online_days
                    = form.input :online_days, as: :number, required: false
                  - if can? :update, @project, :goal
                    = form.input :goal, as: :number, required: false
                  - if can? :update, @project, :about
                    = form.input :about, required: false
                  .clearfix
                  .form-actions.bootstrap-twitter
                    = form.submit class: 'btn'
        #project_updates.content.hide
          - if can? :update, @project
            .bootstrap-form
              = semantic_form_for [@project, Update.new(:user_id => current_user.id)] do |form|
                = form.inputs do
                  = form.input :title, as: :string, label: t('projects.project_updates.title')
                  = form.input :comment, as: :text, label: t('projects.project_updates.comment'), input_html: {rows: 10}
                  = render 'formatting_tips'
                = form.actions do
                  .bootstrap-twitter
                    = form.submit t('projects.project_updates.submit'), class: "btn", id: "update_submit"
                    .loading_updates.hide= image_tag "loading.gif"

          .updates_wrapper
            = render :template => 'updates/index'
        .media_content_backers
          #project_backers.content.hide
        #project_comments.content.hide= render :partial => 'comments'
        #project_about.content
          .midia
            .video
              iframe src="#{@project.vimeo.embed_url}?title=0&amp;byline=0&amp;portrait=0&amp" width="640" height="430" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen
            .social
              #project_share
                - if @project.permalink
                  #facebook_share= render_facebook_like href: project_by_slug_url(@project.permalink, locale: I18n.locale)
                - else
                  #facebook_share= render_facebook_like href: project_url(@project, locale: I18n.locale)
                ul
                  li.embed
                    = link_to '#embed', :id => 'embed_link' do
                      = image_tag "catarse/embed_icon19x9.png", :title => t('.share.embed_title')
                      = t('.share.embed')
                  li.link
                    = text_field_tag "project_link", @project.short_url
                #twitter_share= render_twitter
                .clear
          .text
            .flag
            h5= t('.about_title')
            .clearfix
            p
              = @project.about_html.html_safe
        .clearfix
        #loading= image_tag "loading.gif"
      .clearfix
    .sidebar
      .info
        #statistics
          .statistics
            .item.backers
              p= @project.total_backers
              em= t('statistics.backers.subtitle')
            .item.goal
              p= @project.display_pledged
              em= t('statistics.goal.subtitle', :total => @project.display_goal).html_safe
            .item.time
              p= @project.remaining_days
              em #{@project.time_to_go[:unit].capitalize} #{pluralize_without_number(@project.time_to_go[:time], t('remaining_singular'), t('remaining_plural'))}

          #condition[class="#{@project.display_status}"]
            p
              - if @project.successful?
                - if @project.expired?
                  = t('projects.back_project.project_warning.successful.expired', :date => @project.display_expires_at)
                - else
                  = t('projects.back_project.project_warning.successful.not_expired', :date => @project.display_expires_at)
              - elsif @project.waiting_confirmation?
                = t('projects.back_project.project_warning.waiting_confirmation')
              - else
                - if @project.expired?
                  = t('projects.back_project.project_warning.not_successful.expired', :goal => @project.display_goal, :date => @project.display_expires_at)
                - else
                  = t('projects.back_project.project_warning.not_successful.not_expired', :goal => @project.display_goal, :date => @project.display_expires_at)
          - if @project.can_back?
            #pledge
              = form_tag(new_project_backer_path(@project), :method => :get, :id => 'back_project_form') do
                fieldset
                  = submit_tag t('projects.back_project.submit'), :disabled => (not @project.can_back?)
        #creator_profile
          h3= t('project_by')
          .avatar = @project.user.display_image_html :width => 80, :height => 80
          .personal_info
            p.name
             = link_to @project.user.display_name, user_path(@project.user)
            #bio
              p= @project.user.bio
          #city
            p.backer= t('count_backed_projects', :total => @project.user.total_backs)
            p.city
              | #{@project.user.address_city}
        .user_social
          ul
            - if @project.user.facebook_link
              li
                = link_to "Perfil no facebook", @project.user.facebook_link, :target => '_blank', :class=> 'facebook'
            - if @project.user.twitter
              li
                = link_to "Perfil no twitter", @project.user.twitter_link, :target => '_blank', :class=> 'twitter'
            - if @project.user.email
              li
                = mail_to @project.user.email, @project.user.email, :target => '_blank', :class=> 'email'
            - if @project.user.other_link
              li.other
                = link_to @project.user.other_link, @project.user.other_link, :target => '_blank'

        .clearfix
        - if can?(:update, @project)
          .bootstrap-twitter.bootstrap-form
            .alert.alert-info
              h4.alert-header= t('.no_rewards_warning_title')
              p style="margin:0; padding:0;"
                = t('.no_rewards_warning')
            .clearfix
            = link_to t('.menu.add_reward'), 'javascript:void(0);', class: 'btn btn-success pull-right add_new_reward'
            .clearfix
            .well.new_reward_content.hide
              = semantic_form_for [@project, Reward.new] do |f|
                = f.input :minimum_value
                = f.input :description
                = f.input :maximum_backers
                = f.submit :class => 'btn'
        #rewards
          - @rewards.each do |reward|

            div[id="reward_#{reward.id}" class="box #{(can?(:update, reward) ? 'clickable_owner' : '')} #{(@project.can_back? && !reward.sold_out? && !can?(:update, reward)  ? 'clickable'  : '' )}"]
              - if can?(:update, @project)
                .hide id="reward#{reward.id}Editor"
                  .bootstrap-form
                    = semantic_form_for [@project, reward] do |f|
                      - if can? :update, reward, :minimum_value
                        = f.input :minimum_value
                      - if can? :update, reward, :description
                        = f.input :description
                      - if can? :update, reward, :maximum_backers
                        = f.input :maximum_backers
                      .bootstrap-twitter
                        = f.submit :class => 'btn'

                      .clearfix.bootstrap-twitter
                        = link_to [@project, reward], class: 'btn btn-danger', style: 'margin-top: 20px;',method: :delete, confirm: 'You are sure?' do
                          i.icon-trash.icon-white
                - if can?(:update, reward)
                  .bootstrap-twitter
                    = link_to "#reward#{reward.id}Editor", :class => 'edit_reward btn btn-mini pull-right btn-primary', :style =>'margin-right: -17px;' do
                      i.icon-pencil.icon-white


              = hidden_field_tag 'url', "#{new_project_backer_path(@project)}/?reward_id=#{reward.id}"
              - if reward.sold_out?
                span.icon.sold_out
              - else
                span.icon.avaliable
              h2= t('projects.rewards.reward_title', :minimum => reward.display_minimum).html_safe
              em= pluralize(reward.backers.confirmed.count, t('backer_singular'), t('backer_plural'))
              .clearfix
              p
                = reward.display_description
              - if reward.maximum_backers
                .maximum_backers.clearfix
                  - if reward.sold_out?
                    .sold_out= t('reward.sold_out')
                  - else
                    .limited= t('reward.limited')
                    .remaining
                      = t('reward.display_remaining', :remaining => reward.remaining, :maximum => reward.maximum_backers).html_safe
                .clearfix


          .clearfix

    .clearfix
= render 'show_embed'
