= render 'shared/header_channel'

.row.admin-projects
  h1
    = @title = t('channels.admin.management.title')
    ' :
    = @total_projects
    '
    = t('channels.admin.management.total')

  h3 = t('channels.admin.filter.title')
  = simple_form_for '', url: channels_admin_projects_path, method: :get do |form|
    .row
      .large-2.columns
        = form.input :by_id, as: :integer, label: t('channels.admin.filter.by_id')
      .large-2.columns
        = form.input 'between_created_at[start_at]', as: :string, label: t('channels.admin.filter.between_created_at'), input_html: { data: { mask: '99/99/9999' } }
      .large-2.columns
        = form.input 'between_created_at[ends_at]', as: :string, label: false, input_html: { class: 'custom', data: { mask: '99/99/9999' } }
      .large-3.columns
        = form.input :with_state, collection: Project.state_names, label: t('channels.admin.filter.with_state'), as: :select, selected: params[:with_state], include_blank: true
      .large-2.large-offset-1.columns
        p.filtered-number = @projects.count
        p.filtered-number-label
          = pluralize_without_number(@projects.count, t('project_singular'), t('project_plural'))
          |
          = pluralize_without_number @projects.count, t('found_singular'), t('found_plural')
    .row
      .large-3.columns
        = form.input :pg_search, as: :string, label: t('channels.admin.filter.pg_search')
      .large-3.columns
        = form.input :user_name_contains, as: :string, label: t('channels.admin.filter.user_name_contains')
      .large-3.columns
        = form.input :order_by, label: t('channels.admin.filter.order_table'), as: :select, collection: [[t('.order_created_at'), 'created_at desc'], [t('.order_asc'), 'goal asc'], [t('.order_desc'), 'goal desc']], selected: params[:order_by]
      .large-2.large-offset-1.columns
        = form.button :submit, t('channels.admin.filter.submit'), class: 'button medium negative'

    .clearfix


  = paginate @projects
  - if @projects.empty?
    = t('.no_backers')
  - else
    table.admin-projects-table
      thead
        tr
          th.large-2.columns= t('channels.admin.table.name')
          th.large-1.columns= t('channels.admin.table.category')
          th.large-1.columns= t('channels.admin.table.user_id')
          th.large-1.columns= t('channels.admin.table.goal')
          th.large-1.columns= t('channels.admin.table.pledged')
          th.large-1.columns= t('channels.admin.table.total_backs')
          th.large-1.columns= t('channels.admin.table.recommended')
          th.large-1.columns= t('channels.admin.table.online_date')
          th.large-1.columns= t('channels.admin.table.expires_at')
          th.large-1.columns= t('channels.admin.table.state')
          th.large-1.columns
      tbody
        - @projects.includes(:category).each do |project|
          tr id=project.id class=cycle("even", "odd")
            td.large-2.columns= link_to project.name, project_by_slug_path(permalink: project.permalink)
            td.large-1.columns= project.category
            td.large-1.columns= best_in_place [:channels, :admin, project], :user_id, method: :put, type: :input
            td.large-1.columns= best_in_place [:channels, :admin, project], :goal, method: :put, type: :input, display_as: :display_goal
            td.large-1.columns= "#{project.display_pledged} (#{project.progress}%)"
            td.large-1.columns= project.total_backers
            td.large-1.columns= best_in_place [:channels, :admin, project], :recommended, method: :put, type: :checkbox, collection: [t('no'), t('yes')]
            td.large-1.columns= project.online_date.strftime('%d/%m/%Y') if project.online_date
            td.large-1.columns= project.display_expires_at
            td.large-1.columns
              - if project.online?
                span.label.label-online= project.state
              - elsif project.successful?
                span.label.label-success= project.state
              - elsif project.failed? or project.rejected?
                span.label.label-important= project.state
              - elsif project.waiting_funds?
                span.label.label-warning= project.state
              - else
                span.label= project.state
            td.large-1.columns.project-events-dropdown
              ul.dropdown
                - if project.can_approve?
                  li
                    = link_to approve_channels_admin_project_path(project), method: :put do
                      i.icon-ok
                      = t('channels.admin.table.approve')

                - if project.can_reject?
                  li
                    = link_to reject_channels_admin_project_path(project), method: :put  do
                      i.icon-ban-circle
                      = t('channels.admin.table.reject')

                - if project.can_push_to_draft?
                  li
                    = link_to  push_to_draft_channels_admin_project_path(project), method: :put  do
                      i.icon-trash
                      = t('channels.admin.table.send_to_draft')

  = paginate @projects

= render 'shared/footer_channel'
