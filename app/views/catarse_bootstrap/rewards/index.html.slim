- collection.rank(:row_order).each do |reward|

  .card.card-secondary.u-marginbottom-10.card-reward[id="reward_#{reward.id}" data-new_contribution_url=new_project_contribution_path(parent, reward_id: reward.id) data-update_url=sort_project_reward_path(parent, reward) class="#{(policy(reward).update? ? 'clickable_owner sortable' : '')} #{(parent.online? && !reward.sold_out? && !policy(reward).update?  ? 'clickable'  : '' )} #{reward.sold_out? ? 'project-reward-box-gone' : ''} "]
    .project-reward-box-title
      .fontsize-base.fontweight-semibold = t('.reward_title', minimum: reward.display_minimum).html_safe
      .fontsize-smaller.u-marginbottom-20.fontweight-semibold = pluralize(reward.contributions.with_state('confirmed').count(:all), t('contribution_singular'), t('contribution_plural'))

      - if reward.maximum_contributions
        - if reward.sold_out?
          span.badge.badge-gone.fontsize-smaller
            = t('.sold_out')
        - else
          span.badge.badge-attention.fontsize-smaller
            span.fontweight-bold
              => t('.limited')
            = " (" + reward.display_remaining + ")"
        - in_time_to_confirm = reward.contributions.with_state('waiting_confirmation').count(:all)
        - if in_time_to_confirm > 0
          .maximum_contributions.in_time_to_confirm.clearfix
            .pending= t('.contributions_to_confirm', count: in_time_to_confirm)

    .fontsize-small = reward.display_description

    - if reward.days_to_delivery.present?
        .fontsize-smallest = "#{t('.reward_deliver_time', estimate: reward.display_deliver_estimate)}".html_safe

    - if current_user && current_user.admin
        .fontsize-smallest = "Modificado em: #{I18n.l(reward.updated_at.to_date)} #{parent.online_date.nil? ? '' : ((parent.online_date > reward.updated_at)? '(draft)' : '(online)')}"

    .project-reward-box-hover
      .project-reward-box-select-text = "Selecione esta recompensa"
