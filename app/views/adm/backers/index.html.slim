#page_content
  .container
    .title
      h1= t('.title')
      h2
        strong= "#{@total_backers} "
        = t('.total_backers')
        | ·
        strong= "#{@total_backs} "
        = t('.total_backs')
        | ·
        strong= "#{number_to_currency @total_backed, unit: 'R$', precision: 0, delimiter: '.'} "
        = t('.total_backed')
        | ·
        strong= "#{@total_users} "
        = t('.total_users')

    .filters
      .bootstrap-form
        = form_tag adm_backers_path, method: :get, class: 'form-horizontal' do |f|
          fieldset
            .input
              = label_tag :by_user_id, t('.user_id')
              = text_field_tag :by_user_id, params[:by_user_id], class: 'input-small'
            .input
              = label_tag :between_values, t('.between_values')
              = text_field_tag 'between_values[start_at]', (params[:between_values][:start_at] if params[:between_values].present?), class: 'input-small'
              | &nbsp;
              | &nbsp;
              = text_field_tag 'between_values[ends_at]', (params[:between_values][:ends_at] if params[:between_values].present?), class: 'input-small'
            .input
              = label_tag :by_state, t('.by_state')
              = select_tag :by_state, options_for_select(Backer.state_names, params[:by_state]), include_blank: true
            .input
              = label_tag :by_key, t('.key')
              = text_field_tag :by_key, params[:by_key]
            .input
              = label_tag :project_name_contains, t('.project')
              = text_field_tag :project_name_contains, params[:project_name_contains]
            .input
              = label_tag :user_name_contains, t('.user')
              = text_field_tag :user_name_contains, params[:user_name_contains]
            .bootstrap-twitter
              .input.submit
                = submit_tag t('.submit'), class: 'btn btn-success'
          fieldset
            .input.check
              = check_box_tag :confirmed, :on, params[:confirmed]
              = label_tag :confirmed, t('.confirmed')
            .input.check
              = check_box_tag :credits, :on, params[:credits]
              = label_tag :credits, t('.credits')

            .input.check
              = check_box_tag :pending_to_refund, :on, params[:pending_to_refund]
              = label_tag :pending_to_refund, t('.pending_to_refund')
            /.input.check
            /  = check_box_tag :requested_refund
            /  = label_tag :requested_refund, t('.requested_refund')
            /.input.check
            /  = check_box_tag :refunded
            /  = label_tag :refunded, t('.refunded')
            .input.total_results
              #total_results
                = pluralize_without_number collection.count, t('found_singular'), t('found_plural')
                strong= collection.count
                = pluralize_without_number(collection.count, t('backer_singular'), t('backer_plural')).downcase
      .clearfix
      = paginate @backers
      - if @backers.empty?
        = t('.no_backers')
      - else
        .bootstrap-twitter
          table.table.table-striped
            thead
              tr
                th= t('.info')
                th= t('.project')
                th= t('.user')
                th= t('.value')
                th= t('.reward')
                th= t('.key')
                th= t('.anonymous')
                th= t('.credits')
                th= t('.state')
                th
            tbody
              - @backers.includes(:project, :user, :reward).each do |backer|
                tr id=backer.id class=cycle("even", "odd")
                  td
                    .bootstrap-twitter
                      div id="backerInfo#{backer.id}" class="hide modal"
                        .modal-header
                          h3= t('.backer_info', key: backer.key)
                        .modal-body style='text-align: left'
                          p
                            strong= t('.payment_method')
                            | &nbsp;
                            = backer.payment_method
                          p
                            strong= t('.payment_fee')
                            | &nbsp;
                            = number_to_currency backer.payment_service_fee, unit: 'R$', precision: 2, delimiter: '.'
                          p
                            strong= t('.payment_id')
                            | &nbsp;
                            = backer.payment_id
                          p
                            strong= t('.payer_email')
                            | &nbsp;
                            = backer.payer_email
                          p
                            strong= t('.user_email')
                            | &nbsp;
                            = backer.user.email
                          p
                            strong= t('.payment_choice')
                            | &nbsp;
                            = backer.payment_choice
                          p
                            strong= t('.created_at')
                            | &nbsp;
                            = l(backer.created_at)

                        .modal-footer
                          button type='button' data-dismiss="modal" class="btn" OK
                    = link_to "#backerInfo#{backer.id}", class: 'btn btn-mini', data: {toggle:'modal'} do
                      i.icon-info-sign
                  td title=backer.project.name
                    = link_to project_by_slug_path(permalink: backer.project.permalink) do
                      = image_tag backer.project.display_image, class: 'project_img'
                  td title=backer.user.display_name
                    = link_to user_path(backer.user) do
                      = image_tag backer.user.display_image, class: 'user_img'
                    .user_id= best_in_place [:adm, backer], :user_id, method: :put, type: :input
                  td= best_in_place [:adm, backer], :value, method: :put, type: :input
                  td title=("#{backer.reward.display_minimum} - #{backer.reward.description}" if backer.reward)
                    - if backer.reward
                      = backer.reward.display_minimum
                    - else
                      | -
                    .btn-group
                      = link_to 'javascript:void(0);', data: {toggle: 'dropdown'}, class: 'btn btn-mini dropdown-toggle' do
                        span.caret
                      ul.dropdown-menu
                        li title=("#{t('.no_reward')}" ) = link_to t('.no_reward'), change_reward_adm_backer_path(backer, reward_id: nil), method: :put
                        - backer.available_rewards.each do |reward|
                          li title=("#{reward.display_minimum} - #{reward.description}" ) = link_to reward.minimum_value, change_reward_adm_backer_path(backer, reward_id: reward.id, local_params: params), method: :put

                  td.key= backer.key
                  td.checkbox= best_in_place [:adm, backer], :anonymous, method: :put, type: :checkbox, collection: [t('no'), t('yes')]
                  td= (backer.credits ? t('yes') : t('no'))
                  td= backer.state
                  td.bootstrap-twitter
                    .btn-group
                      = link_to 'javascript:void(0);', data: {toggle: 'dropdown'}, class: 'btn btn-mini dropdown-toggle' do
                        span.caret
                      ul.dropdown-menu
                        - if backer.confirmed?
                          li= link_to t('adm.backers.index.unconfirm_backer'), pendent_adm_backer_path(backer, local_params: params), method: :put
                        - else
                          li= link_to t('adm.backers.index.confirm_backer'), confirm_adm_backer_path(backer, local_params: params), method: :put
                        - if backer.requested_refund? or backer.confirmed?
                          li= link_to t('adm.backers.index.refund_backer'), refund_adm_backer_path(backer, local_params: params), method: :put
                        li= link_to t('adm.backers.index.refund_and_hide'), hide_adm_backer_path(backer, local_params: params), method: :put
                        li= link_to t('adm.backers.index.cancel'), cancel_adm_backer_path(backer, local_params: params), method: :put
                        li= link_to t('adm.backers.index.push_to_trash'), push_to_trash_adm_backer_path(backer, local_params: params), method: :put
      = paginate @backers
  .clearfix

