#page_content.admin
  .container
    .title
      h1= @title = t('.title')
      h2
        strong= "#{@total_projects} "
        = t('.total_projects')

    .filters
      .bootstrap-form
        = form_tag admin_projects_path, method: :get, class: 'form-horizontal' do |f|
          = hidden_field_tag :order_by, params[:order_by]
          fieldset
            .input
              = label_tag :by_id, t('.id')
              = text_field_tag :by_id, params[:by_id], class: 'input-small'

            .input
              = label_tag :between_created_at_start_at, t('.between_created_at')
              = text_field_tag 'between_created_at[start_at]', (params[:between_created_at][:start_at] if params[:between_created_at].present?), class: 'input-small'
              | &nbsp;
              | &nbsp;
              = text_field_tag 'between_created_at[ends_at]', (params[:between_created_at][:ends_at] if params[:between_created_at].present?), class: 'input-small'

            .input
              = label_tag :with_state, t('.with_state')
              = select_tag :with_state, options_for_select(Project.state_names, params[:with_state]), include_blank: true

            .input
              = label_tag :pg_search, t('.project')
              = text_field_tag :pg_search, params[:pg_search]
            .input
              = label_tag :user_name_contains, t('.user')
              = text_field_tag :user_name_contains, params[:user_name_contains]
            .input
              = label_tag :by_online_date, t('.online_date')
              = text_field_tag :by_online_date, params[:by_online_date]
            .input
              = label_tag :by_expires_at, t('.expires_at')
              = text_field_tag :by_expires_at, params[:by_expires_at]
            .input
              = label_tag :by_updated_at, t('.updated_at')
              = text_field_tag :by_updated_at, params[:by_updated_at]
            .input
              = label_tag :by_goal, t('.goal')
              = text_field_tag :by_goal, params[:by_goal]
            .input
              = label_tag :by_category_id, t('.by_category')
              = select_tag :by_category_id, options_from_collection_for_select(Category.all, :id, :name_pt,params[:by_category_id]), include_blank: true

            .bootstrap-twitter
              .input.submit
                = submit_tag t('.submit'), class: 'btn btn-success'
          fieldset
            .input.total_results
              #total_results
                = pluralize_without_number @projects.count, t('found_singular'), t('found_plural')
                strong= @projects.count
                = pluralize_without_number(@projects.count, t('project_singular'), t('project_plural')).downcase
      .clearfix
    .data-table
      = paginate @projects
      - if @projects.empty?
        = t('.no_backers')
      - else
        .bootstrap-twitter
          table.table.table-striped
            thead
              tr
                th style="width: 200px;"
                  = t('.name')
                th= t('.category')
                th= t('.user_id')
                th
                  a data-sort="goal" href='#'= t('.goal')
                  span.sort-order
                th
                  a data-sort="project_totals.progress" href='#'= t('.pledged')
                  span.sort-order
                th
                  a data-sort="project_totals.total_backers" href='#'= t('.total_backs')
                  span.sort-order
                th= t('.recommended')
                th
                  a data-sort="online_date" href='#'= t('.online_date')
                  span.sort-order
                th
                  a data-sort="projects.expires_at" href='#'= t('.expires_at')
                  span.sort-order
                th
                  a data-sort="updated_at" href='#'= t('.last_modification')
                  span.sort-order
                th= t('.state')
                th
            tbody
              - @projects.each do |project|
                tr id=project.id class=cycle("even", "odd")
                  td
                    = link_to project.name, project_by_slug_path(permalink: project.permalink)
                    - if project.channels.present?
                      | &nbsp;
                      - project.channels.each do |channel|
                        span.label.label-inverse= channel.name
                        | &nbsp;
                  td= project.category
                  td= best_in_place [:admin, project], :user_id, method: :put, type: :input
                  td= best_in_place [:admin, project], :goal, method: :put, type: :input, display_as: :display_goal
                  td= "#{project.display_pledged} (#{project.progress}%)"
                  td= project.total_backers
                  td.checkbox= best_in_place [:admin, project], :recommended, method: :put, type: :checkbox, collection: [t('no'), t('yes')]
                  td= project.online_date.strftime('%d/%m/%Y') if project.online_date
                  td= project.display_expires_at
                  td= project.updated_at.strftime('%d/%m/%Y') if project.updated_at.present?
                  td
                    - if project.online?
                      span.label.label-online= project.state
                    - elsif project.successful?
                      span.label.label-success= project.state
                    - elsif project.failed? or project.rejected?
                      span.label.label-important= project.state
                    - elsif project.waiting_funds?
                      span.label.label-warning= project.state
                    - else
                      span.label= project.state
                  td
                    .btn-group
                      = link_to 'javascript:void(0);', class: 'btn btn-mini dropdown-toggle', data: {toggle: "dropdown"} do
                        b.caret
                      ul.dropdown-menu
                        - if project.can_push_to_trash?
                          li
                            = link_to admin_project_path(project), method: :delete, data: {confirm: t('admin.confirm_dialog')} do
                              i.icon-trash
                              = t('.send_to_trash')
                        - if project.can_approve?
                          li
                            = link_to approve_admin_project_path(project), method: :put do
                              i.icon-ok
                              = t('.approve')

                        - if project.can_reject?
                          li
                            = link_to reject_admin_project_path(project), method: :put  do
                              i.icon-ban-circle
                              = t('.reject')

                        - if project.can_push_to_draft?
                          li
                            = link_to  push_to_draft_admin_project_path(project), method: :put  do
                              i.icon-trash
                              = t('.send_to_draft')
      = paginate @projects
  .clearfix


